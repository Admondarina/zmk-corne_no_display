/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        // zmk,matrix_transform = &five_column_transform;
    };
};

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD0";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";

            // --------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   | 
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE      &kp Q  &kp W  &kp E     &kp R         &kp T    &kp Y  &kp U      &kp I             &kp O    &kp P     &kp BSPC
&kp TAB         &kp A  &kp S  &kp D     &kp F         &kp G    &kp H  &kp J      &kp K             &kp L    &kp SEMI  &kp ENTER
&kp LEFT_SHIFT  &kp Z  &kp X  &kp C     &kp V         &kp B    &kp N  &kp M      &kp COMMA         &kp DOT  &kp FSLH  &kp RIGHT_SHIFT
                              &kp LGUI  &kp LEFT_ALT  &mo 1    &mo 2  &kp SPACE  &kp LEFT_CONTROL
            >;
        };

        lower_layer {
            display-name = "NUMBER";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE  &kp N1  &kp N2    &kp N3    &kp N4     &kp N5            &kp N6  &kp N7           &kp N8        &kp N9        &kp N0   &kp LBKT
&trans     &kp UP  &kp DOWN  &kp LEFT  &kp RIGHT  &trans            &trans  &bt BT_SEL 0     &bt BT_SEL 1  &bt BT_SEL 2  &kp SQT  &kp POUND
&trans     &kp LT  &trans    &trans    &trans     &bt BT_CLR_ALL    &trans  &trans           &trans        &trans        &trans   &trans
                             &trans    &trans     &trans            &trans  &kp RIGHT_SHIFT  &trans
            >;
        };

        upper_layer {
            bindings = <
&trans  &trans     &trans     &trans     &trans     &trans    &trans  &kp F1           &kp F2   &kp F3   &kp F4   &kp RBKT
&trans  &kp PG_UP  &kp PG_DN  &kp EQUAL  &kp MINUS  &trans    &trans  &kp F5           &kp F6   &kp F7   &kp F8   &trans
&trans  &trans     &trans     &trans     &trans     &trans    &trans  &kp F9           &kp F10  &kp F11  &kp F12  &trans
                              &trans     &trans     &trans    &trans  &kp RIGHT_SHIFT  &trans
            >;

            label = "fuction";
        };

        layer_3 {
            bindings = <
&kp RA(GRAVE)  &kp RA(NUMBER_1)  &kp RA(NUMBER_2)  &kp RA(NUMBER_3)  &kp RA(NUMBER_4)  &kp RA(N5)    &kp RA(NUMBER_6)  &kp RA(N7)  &kp RA(N8)  &kp RA(N9)  &kp RA(N0)            &trans
&trans         &trans            &trans            &trans            &trans            &trans        &trans            &trans      &trans      &trans      &kp RA(SINGLE_QUOTE)  &kp RA(HASH)
&trans         &trans            &trans            &trans            &trans            &trans        &trans            &trans      &trans      &trans      &kp RA(LEFT_BRACKET)  &kp RA(RIGHT_BRACKET)
                                                   &trans            &trans            &trans        &trans            &trans      &trans
            >;

            label = "Cosas";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Layer_3 {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
